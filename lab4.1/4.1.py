"""
Задание 1.  (из  темы  4.1, нейросеть в два слоя):

* Выполните программу обучения нейронной сети, приведенную в теме 4.1 на стр. 2-3
* сравните l1 после первой итерации и после последней
* посмотрите на функцию nonlin.
* посмотрите, как меняется l1_error
* разберите строку 36 – основные секретные ингредиенты собраны тут (отмечена !!!)
* разберите строку 39 – вся сеть готовится именно к этой операции (отмечена !!!)
"""
import numpy as np


# Сигмоида
def nonlin(x, deriv=False):
    if (deriv == True):
        return (x * (1 - x))

    return 1 / (1 + np.exp(-x))


# набор входных данных
X = np.array([[0, 0, 1],
              [0, 1, 1],
              [1, 0, 1],
              [1, 1, 1]])

# выходные данные
y = np.array([[0, 0, 1, 1]]).T

# сделаем случайные числа более определёнными
np.random.seed(1)

# инициализируем веса случайным образом со средним 0
syn0 = 2 * np.random.random((3, 1)) - 1

l1_comp = []
l1_error_comp = []

for iter in range(10000):
    # прямое распространение
    l0 = X
    l1 = nonlin(np.dot(l0, syn0))

    if iter == 0 or iter == 9999:
        l1_comp.append(l1)

    # насколько мы ошиблись?
    l1_error = y - l1

    if iter % 1000 == 0:
        l1_error_comp.append(l1_error)

    # перемножим это с наклоном сигмоиды
    # на основе значений в l1
    l1_delta = l1_error * nonlin(l1, True)  # !!!

    # обновим веса
    syn0 += np.dot(l0.T, l1_delta)  # !!!

print("Выходные данные после тренировки:")
print(l1)

print('Веса:')
print(syn0)

print('l1 после первой итерации:')
print(l1_comp[0])
print('l1 после последней итерации:')
print(l1_comp[1])

print('Изменение l1_error:')
print(l1_error_comp)
